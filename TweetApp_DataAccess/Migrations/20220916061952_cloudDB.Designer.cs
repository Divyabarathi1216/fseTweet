// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TweetApp_DataAccess;

namespace TweetApp_DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220916061952_cloudDB")]
    partial class cloudDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TweetApp_Models.LikeTweet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLikeOrDislike")
                        .HasColumnType("bit");

                    b.Property<int>("tweetId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("TweetApp_Models.ReplyTweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("replyTweet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("replyTweetCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tweetId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tweetId");

                    b.ToTable("replyTweets");
                });

            modelBuilder.Entity("TweetApp_Models.Tweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("dislikeCnt")
                        .HasColumnType("int");

                    b.Property<int>("likeCnt")
                        .HasColumnType("int");

                    b.Property<string>("tag")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("tweet")
                        .HasColumnType("nvarchar(144)")
                        .HasMaxLength(144);

                    b.Property<DateTime>("tweetCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("tweets");
                });

            modelBuilder.Entity("TweetApp_Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("contactNo")
                        .HasColumnType("bigint");

                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("loginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("userCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("userLastSeen")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("userModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TweetApp_Models.LikeTweet", b =>
                {
                    b.HasOne("TweetApp_Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TweetApp_Models.ReplyTweet", b =>
                {
                    b.HasOne("TweetApp_Models.Tweet", null)
                        .WithMany("replyTweets")
                        .HasForeignKey("tweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TweetApp_Models.Tweet", b =>
                {
                    b.HasOne("TweetApp_Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
